name: ✨ Build & Auto Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - dev
  pull_request:
    branches: [dev]

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - name: 🛎️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧰 Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
          
      - name: 🔧 Enable Windows Desktop for WPF
        run: |
          Write-Host "Enabling Windows Desktop development workload..."
          # This ensures WPF/WinForms are available in GitHub Actions

      - name: 🔍 Verify environment
        run: |
          Write-Host "=== Environment Information ==="
          Write-Host "OS: $env:OS"
          Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
          Write-Host ".NET SDK version:"
          dotnet --version
          Write-Host ".NET SDKs installed:"
          dotnet --list-sdks
          Write-Host "================================"

      - name: 🔧 Restore dependencies
        run: dotnet restore ProcessorEmulator.csproj --verbosity normal

      - name: 🏗️ Build solution
        run: |
          Write-Host "Building ProcessorEmulator with Release configuration..."
          dotnet build ProcessorEmulator.csproj --configuration Release --no-restore --verbosity normal --nologo
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Build failed with exit code $LASTEXITCODE"
            exit 1
          }
          Write-Host "Build completed successfully!"

      - name: 🏷️ Auto-create version tag (only on main branch)
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: |
          # Get the latest tag, or start with v1.0.0 if no tags exist
          $latestTag = git describe --tags --abbrev=0 2>$null
          if ($LASTEXITCODE -ne 0) {
            $newTag = "v1.0.0"
            Write-Host "No existing tags found. Creating initial tag: $newTag"
          } else {
            # Parse the version and increment patch version
            $version = $latestTag -replace '^v', ''
            $versionParts = $version.Split('.')
            $major = [int]$versionParts[0]
            $minor = [int]$versionParts[1]
            $patch = [int]$versionParts[2] + 1
            $newTag = "v$major.$minor.$patch"
            Write-Host "Latest tag: $latestTag, New tag: $newTag"
          }
          
          # Create and push the new tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $newTag
          git push origin $newTag
          
          # Set output for later steps
          echo "NEW_TAG=$newTag" >> $env:GITHUB_ENV

      - name: 📦 Package binaries (only on tags or new auto-tags)
        if: startsWith(github.ref, 'refs/tags/') || env.NEW_TAG
        run: |
          $timestamp = Get-Date -Format "yyyyMMddHHmm"
          if ($env:NEW_TAG) {
            $tagName = $env:NEW_TAG
          } else {
            $tagName = "${{ github.ref_name }}"
          }
          Write-Host "Creating package for tag: $tagName"
          
          # Check if build output exists
          if (Test-Path "bin\Release\net6.0-windows\") {
            Write-Host "Build output found, creating package..."
            mkdir release-package -ErrorAction SilentlyContinue
            Copy-Item -Path "bin\Release\net6.0-windows\*" -Destination "release-package\" -Recurse -Force
            Compress-Archive -Path "release-package\*" -DestinationPath "ProcessorEmulator-$tagName-$timestamp.zip" -Force
            Write-Host "Package created: ProcessorEmulator-$tagName-$timestamp.zip"
          } else {
            Write-Host "ERROR: Build output not found at bin\Release\net6.0-windows\"
            exit 1
          }

      - name: 🚀 Create GitHub Release (only on tags or new auto-tags)
        if: startsWith(github.ref, 'refs/tags/') || env.NEW_TAG
        uses: softprops/action-gh-release@v1
        with:
          files: ProcessorEmulator-*.zip
          generate_release_notes: true
          prerelease: false
          tag_name: ${{ env.NEW_TAG || github.ref_name }}
          name: "Processor Emulator ${{ env.NEW_TAG || github.ref_name }}"
          body: |
            🎉 **Automated Release**
            
            This release was automatically created from the latest `main` branch.
            
            **What's New:**
            - Pop culture error messages (Simpsons, Rick & Morty, Futurama)
            - Enhanced error handling system
            - Improved hypervisor crash messages
            - Fun status messages for long operations
            
            **Download the zip file below to get the latest version!**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Build complete
        run: echo "Build completed successfully! 🎉"

      # this had better work .. else if it doesn't, welp back to the drawing board. 
        # --- IGNORE ---